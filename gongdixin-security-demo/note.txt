特别注意事项(写在最前面):
1. 当父类有多个子类继承的时候 如何发现覆写的内容没有按预期的实现 那么极有可能是你的子类加载顺序有点问题 使用@Order确保加载顺序
   参考
   com/gongdixin/core/authentication/social/SocialConfig.java
   com/gongdixin/core/authentication/social/qq/config/QQAutoConfig.java
   这两个类由于一个没有覆写父类方法 一个覆写了 但是加载顺序有先后 最后导致覆写的方法没有运行

开发笔记：
1.BasicErrorController 是SpringBoot针对错误返回码提供的处理
  针对网页和app访问提供不同处理
  提供404，500界面可以对网页访问做统一跳转，但是app访问的话还是放回json串
  配置404等界面时要注意路径，如下所示要放在error文件夹中
  @RequestMapping(produces = "text/html")
  	public ModelAndView errorHtml(HttpServletRequest request,
  			HttpServletResponse response) {
  		HttpStatus status = getStatus(request);
  		Map<String, Object> model = Collections.unmodifiableMap(getErrorAttributes(
  				request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));
  		response.setStatus(status.value());
  		ModelAndView modelAndView = resolveErrorView(request, response, status, model);
  		return (modelAndView == null ? new ModelAndView("error", model) : modelAndView);
  	}

2.参考com/gongdixin/web/controller/ControllerExceptionHandler.java 注意该类的注解
  @ExceptionHandler表示用于处理哪种异常抛出 程序任何方法抛出这种异常都会被捕获并进入该处理方法
  @ResponseBody表示将返回的数据以Json格式返回
  @ResponseStatus指定返回的状态码

3.让过滤器生效的话只需要将过滤器加上@Component即可
  也可以在WebConfig(Spring配置类)配置类中进行类的实例化
  参考com/gongdixin/web/config/WebConfig.java.timeFilter

4.Filter无法获取当前过滤执行的方法
  Intercepter支持获取Spring框架过滤的方法

5.过滤器 拦截器 切片 执行顺序
    过滤器 -> 拦截器-> 切片
  当抛出异常时捕获顺序
    过滤器 -> 声明了@ControllerAdvice注解的异常处理类 -> 拦截器-> 切片

6.DeferredResultHolder(Spring自带组件)区别于Callable接口
  用于在两个线程间传递数据
  参考课程3-10

7.生成8位随机数
  RandomStringUtils.randomNumeric(8)

8.implements ApplicationListener<ContextRefreshedEvent>
  继承该接口则代表当系统启动完毕之后开始监听

9.使用拦截器拦截异步请求的话要配置configureAsyncSupport
  参考com/gongdixin/web/config/WebConfig.java.configureAsyncSupport

10.StringUtils.join 可以把带格式(就是换行、空格这些)的字符串文档拼接成字符串 处理换行的话是加一个参数 "/n"

11.启动properties配置类注意注解
   参照com/gongdixin/core/properties/SecurityProperties.java
   并且添加Maven配置
   <dependency>
       <groupId>org.springframework.boot</groupId>
       <artifactId>spring-boot-configuration-processor</artifactId>
   </dependency>

12. UserController.getCurrentUser的三种写法
    12-1
    @GetMapping("/getCurrentUser")
    public Object getCurrentUser() {
        return SecurityContextHolder.getContext().getAuthentication();
    }

    12-2 Spring会自己帮我们把authentication传进来
    @GetMapping("/getCurrentUser")
    public Object getCurrentUser(Authentication authentication) {
        return authentication;
    }

    12-3 使用@AuthenticationPrincipal注解 只返回用户信息
    @GetMapping("/getCurrentUser")
    public Object getCurrentUser(@AuthenticationPrincipal UserDetails userDetails) {
        return userDetails;
    }

13. Spring自带的request参数获取工具 ServletRequestUtils.getStringParameter

14. AntPathMatcher Spring工具类，路径匹配 带通配符的也可以

15. 熟悉Generator模式的代码设计方法
    可以参考ValidateCodeBeanConfig.java ValidateCodeGenerator.java ImageCodeGenerator.java DemoValidateCodeGenerator.java
    以增量的方式适应变化 而不是每次都去修改代码 而是以新的替换旧的

16. BrowserSecurityConfig.persistentTokenRepository() 该方法一定要加@Bean注解 原因研究中
17. ServletWebRequest Spring工具类 封装请求和响应
18. 特别注意：
    18-1：在@Configuration配置类中 有@Bean注解标注的用于注入类的方法名一定不要写错，如果你的方法名跟某个@Component的默认class名字重复的话 会导致该类无法加载
          除非用@Component将该类的加载名称修改和上述方法名不一致才能加载。

19. 参考项目里的Spring Social架构图.png图来看
    认证服务器 资源服务器 QAuth协议的执行流程 拿令牌拿授权码这些
    Api 用于获取用户信息接口
    connection 封装前几步获取的信息
    connectionFactory 创建connection
    connectionFactory 封装服务提供商provider
    ApiAdapter 适配不同provider返回的数据

20. 问题：为什么填回调域为什么要改本地host呢？ 是qq回调访问本机，但是本机没有公网ip需要做公网映射才行，这样的话qq是访问不到本地的？
    原因：qq的回调并不是新发起一个请求，只是把你发过去的请求forward，就是直接改了你浏览器里的地址，你的浏览器地址改了，首先会从你本地的host解析

21. index主页设置
    如果Demo项目配置了index页面 那么会去替换掉默认的主页

待完善代码：
1. com/gongdixin/core/validatecode/ValidateCodeController.java.createCode
   与
   com/gongdixin/core/validatecode/AbstractValidateCodeProcessor.java.getValidateCodeType
   中关于请求类型的获取优化
   注意：@Component("XXX") 与 Class.class.getSimpleName()的区别
   前者用于Spring管理bean 而 getSimpleName()则是获取类的简写名称 两者没有关联

2. 登录页增加已登录用户信息自动填充功能